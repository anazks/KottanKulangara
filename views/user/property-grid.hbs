<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Photo Gallery</title>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }
        
        body {
            background-color: #f8fff8;
            color: #333;
            line-height: 1.6;
        }

        /* Navigation styles */
        nav {
            background-color: #1a6d30;
            padding: 15px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        nav ul {
            display: flex;
            justify-content: center;
            list-style: none;
        }
        
        nav ul li {
            margin: 0 15px;
        }
        
        nav ul li a {
            color: white;
            text-decoration: none;
            font-weight: bold;
            transition: color 0.3s;
        }
        
        nav ul li a:hover {
            color: #e0ffe0;
        }

        /* Gallery styles */
        .container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }

        section h2 {
            text-align: center;
            font-size: 2.2rem;
            margin-bottom: 30px;
            color: #1a6d30;
            position: relative;
            padding-bottom: 15px;
        }

        section h2::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 3px;
            background-color: #66a66f;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .gallery-item {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
            cursor: pointer;
            border: 2px solid #1a6d30;
        }
        
        .gallery-item:hover {
            transform: scale(1.05);
        }
        
        .gallery-item img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
        }

        /* Image Modal Styles */
        .image-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1100;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .image-modal.show {
            display: flex;
            opacity: 1;
        }

        .image-modal-content {
            max-width: 90%;
            max-height: 90%;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .image-modal-content img {
            max-width: 100%;
            max-height: 90vh;
            object-fit: contain;
            animation: zoomIn 0.3s ease;
        }

        .image-modal-controls {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin-top: 10px;
        }

        .image-modal-close {
            color: white;
            font-size: 30px;
            cursor: pointer;
            background: none;
            border: none;
            align-self: flex-end;
        }

        .image-modal-zoom {
            display: flex;
            gap: 10px;
        }

        .zoom-button {
            background-color: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .zoom-button:hover {
            background-color: rgba(255,255,255,0.4);
        }

        @keyframes zoomIn {
            from {
                transform: scale(0.7);
                opacity: 0;
            }
            to {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .gallery {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
        }
    </style>
</head>
<body>
    <nav>
        <ul>
            <li><a href="/">ആചാരങ്ങൾ</a></li>
            <li><a href="#notification">അറിയിപ്പുകള്‍</a></li>
            <li><a href="#gallary">ചിത്രങ്ങൾ</a></li>
            <li><a href="#committee">കമ്മിറ്റി</a></li>
        </ul>
    </nav>

    <section id="gallary" class="container">
        <h2>Photo Gallery</h2>
        <div class="gallery">
             {{#each Interior}}  
            <!-- Placeholder gallery items -->
            <div class="gallery-item">
                <img src='images/uploadIMG/{{_id}}.jpg' alt="Sample Image 1">
            </div>
             {{/each}}     
        </div>
    </section>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gallery = document.querySelector('.gallery');
            const body = document.body;

            // Create modal elements
            const modal = document.createElement('div');
            modal.classList.add('image-modal');

            const modalContent = document.createElement('div');
            modalContent.classList.add('image-modal-content');

            const modalImage = document.createElement('img');

            const controlsContainer = document.createElement('div');
            controlsContainer.classList.add('image-modal-controls');

            const zoomContainer = document.createElement('div');
            zoomContainer.classList.add('image-modal-zoom');

            const zoomInButton = document.createElement('button');
            zoomInButton.textContent = 'Zoom In';
            zoomInButton.classList.add('zoom-button');

            const zoomOutButton = document.createElement('button');
            zoomOutButton.textContent = 'Zoom Out';
            zoomOutButton.classList.add('zoom-button');

            const closeButton = document.createElement('button');
            closeButton.innerHTML = '&times;';
            closeButton.classList.add('image-modal-close');

            // Zoom functionality
            let currentZoom = 1;
            const maxZoom = 3;
            const minZoom = 1;

            zoomInButton.addEventListener('click', () => {
                if (currentZoom < maxZoom) {
                    currentZoom += 0.5;
                    modalImage.style.transform = `scale(${currentZoom})`;
                }
            });

            zoomOutButton.addEventListener('click', () => {
                if (currentZoom > minZoom) {
                    currentZoom -= 0.5;
                    modalImage.style.transform = `scale(${currentZoom})`;
                }
            });

            // Append elements
            zoomContainer.appendChild(zoomInButton);
            zoomContainer.appendChild(zoomOutButton);
            controlsContainer.appendChild(zoomContainer);
            controlsContainer.appendChild(closeButton);

            modalContent.appendChild(modalImage);
            modalContent.appendChild(controlsContainer);
            modal.appendChild(modalContent);
            body.appendChild(modal);

            // Add click event to gallery items
            gallery.addEventListener('click', (e) => {
                const galleryItem = e.target.closest('.gallery-item');
                if (galleryItem) {
                    const img = galleryItem.querySelector('img');
                    modalImage.src = img.src;
                    
                    // Reset zoom
                    currentZoom = 1;
                    modalImage.style.transform = 'scale(1)';
                    
                    modal.classList.add('show');
                }
            });

            // Close modal functionality
            const closeModal = () => {
                modal.classList.remove('show');
                // Reset zoom when closing
                currentZoom = 1;
                modalImage.style.transform = 'scale(1)';
            };

            modal.addEventListener('click', (e) => {
                if (e.target === modal || e.target === closeButton) {
                    closeModal();
                }
            });

            // Close modal with ESC key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && modal.classList.contains('show')) {
                    closeModal();
                }
            });
        });
    </script>
</body>
</html>